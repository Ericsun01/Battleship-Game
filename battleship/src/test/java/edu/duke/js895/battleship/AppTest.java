/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.js895.battleship;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.ResourceAccessMode;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;

import static org.junit.jupiter.api.Assertions.*;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;


class AppTest {
    // By default, human vs human and A wins the game
    
    @Test
    @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
    void test_main_Awin_PVP() throws IOException {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);
        InputStream input = getClass().getClassLoader().getResourceAsStream("input.txt");
        assertNotNull(input);
        InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("output.txt");
        assertNotNull(expectedStream);

        InputStream oldIn = System.in;
        PrintStream oldOut = System.out;

        try {
            System.setIn(input);
            System.setOut(out);
            App.main(new String[0]);
          }
          finally {
            System.setIn(oldIn);
            System.setOut(oldOut);
          }

        String expected = new String(expectedStream.readAllBytes());
        String actual = bytes.toString();
        //System.out.println(actual);
        assertEquals(expected, actual);   
    }

    // In this case, computer vs human and B(human) wins the game
    @Test
    @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
    void test_main_Bwin_EVP() throws IOException {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);
        InputStream input = getClass().getClassLoader().getResourceAsStream("hcinput.txt");
        assertNotNull(input);
        InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("hcoutput.txt");
        assertNotNull(expectedStream);

        InputStream oldIn = System.in;
        PrintStream oldOut = System.out;

        try {
            System.setIn(input);
            System.setOut(out);
            App.main(new String[0]);
          }
          finally {
            System.setIn(oldIn);
            System.setOut(oldOut);
          }

        String expected = new String(expectedStream.readAllBytes());
        String actual = bytes.toString();
        //System.out.println(actual);
        assertEquals(expected, actual);   
    }

    // In this case, computer vs computer and A wins the game
    @Test
    @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
    void test_main_Awin_EVE() throws IOException {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);
        InputStream input = getClass().getClassLoader().getResourceAsStream("ccinput.txt");
        assertNotNull(input);
        InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("ccoutput.txt");
        assertNotNull(expectedStream);
    
        InputStream oldIn = System.in;
        PrintStream oldOut = System.out;
    
        try {
            System.setIn(input);
            System.setOut(out);
            App.main(new String[0]);
          }
          finally {
            System.setIn(oldIn);
            System.setOut(oldOut);
          }
    
          String expected = new String(expectedStream.readAllBytes());
          String actual = bytes.toString();
          //System.out.println(actual);
          assertEquals(expected, actual);   
      }

      @Test
      public void test_initial_check() {
        Board<Character> b1 = new BattleShipBoard<Character>(10, 20, 'X');
        Board<Character> b2 = new BattleShipBoard<Character>(10, 20, 'X');
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        V2ShipFactory factory = new V2ShipFactory();
        Player player1 = new TextPlayer("A", b1, input, System.out, factory);
        Player player2 = new TextPlayer("B", b2, input, System.out, factory);
        App app = new App(player1, player2);
        String result = app.initialCheck("3");
        assertEquals("Invalid type of player, please type again.", result);
      }
}
